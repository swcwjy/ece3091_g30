

//#include <VarSpeedServo.h>

#include <TFT.h>
#include <math.h>
#include <stdio.h>
#define PI 3.1415926535897932384626433832795
#include "VarSpeedServo.h"
//#include "VarSpeedServo.cpp"

float jointAngles[3];
float endEffectorPos[3];
const int L1 = 6;
const int L2 = 8;
const int L3 = 8;
const int L4 = 6;

const int colourSense = 0; // analogue input for colour sensor
const int locator = 1; // analogue input for locator
//int endEffectorPos[2]; //

// Default servo positions (angles)
const int pos1= 90;
const int pos2 = 90;
const int pos3 = 90;
const int pos4 = 90;

// servo motors
VarSpeedServo servo1;
VarSpeedServo servo2;
VarSpeedServo servo3;
VarSpeedServo servo4;


// input values from pots
int inputVal1;
int inputVal2;
int inputVal3;
int inputVal4;

void calc_FK(float jointAngles[])
{
  float d1,d2,d3,th5,th6;
  float rad = (PI/180);
  int L1 = 6;
  int L2 = 8;
  int L3 = 8;
  int L4 = 6;
  float th1 = jointAngles[0];
  float th2 = jointAngles[1];
  float th3 = jointAngles[2];
  th5 = 180 - 90 - th2;
  th6 = 180 + th3 - th5;
  d1 = L2*sin(th2*rad);
  d2 = L3*cos(th6*rad);
  d3 = L2*cos(th2*rad) + L3*sin(th6*rad) + L4;

  
  endEffectorPos[2] = L1 + d1 - d2;
  endEffectorPos[1] = d3*sin(th1*rad);
  endEffectorPos[0] = d3*cos(th1*rad);
  
 
}

void calc_IK(float endEffectorPos[])
{
  float d, r1, r2, r3;
  float phi1, phi2, phi3;
  float deg = (180/PI);

  float x = endEffectorPos[0];
  float y = endEffectorPos[1];
  float z = endEffectorPos[2];

  d = sqrt(x*x + y*y);
  r2 = d - L4;
  r1 = z - L1;
  r3 = sqrt(r1*r1 + r2*r2);
  phi3 = acos((L2*L2 + L3*L3 - r3*r3)/(2*L2*L3));
  phi2 = asin(L3* (sin(phi3))/(r3));
  phi1 = atan(r1/r2);

  // base
  if(x<0 && y!=0){jointAngles[0] = atan(y/x)* deg + 180;}
  else if((y == 0 && x>0)|| (x ==0&&y>0)) {jointAngles[0] = 90-atan(x)* deg;}  
  else if((y == 0 && x<0) || (x ==0&&y<0)) {jointAngles[0] = atan(-x)* deg+90;}  
  else if(y==0 && x==0) {jointAngles[0] = 90;}
  else jointAngles[0] = atan(y/x)* deg;

  //shoulder
  //if(y <0 || z < 0){jointAngles[1] = (phi1 + phi2) * deg+180;}
  //else if(y<0){jointAngles[1]=(phi1 + phi2) * deg;}    
  //else 
  if(y==0 && x==0 && z ==0){jointAngles[1] = 90;}
  else jointAngles[1] = -(phi1 + phi2) * deg;

  // elbow
  //if(z<0 || y <0){jointAngles[2] = phi3*deg + 90;}
  //if(z<0 || y <0){jointAngles[2] = phi3*deg + 90;}
  //else 
  if(y==0 && x==0 && z ==0){jointAngles[2] = 90;}
  else jointAngles[2]= phi3*deg; //
        
  
  
}

void setup()
{
  //Code here:
  Serial.begin(9600);
  // set up motors 
  servo1.attach(9); // base motor output
  servo2.attach(8); // shoulder motor output
  servo3.attach(7); // elbow motor output
  servo4.attach(6); //  claw motor output
    
  //Calc FK
  //jointAngles[0] = 60; //th1
  //jointAngles[1] = 45; //th2
  //jointAngles[2] = -90; //th3
  
  //calc_FK(jointAngles);
  
  //Serial.println(endEffectorPos[0]);
  //Serial.println(endEffectorPos[1]);
  //Serial.println(endEffectorPos[2]);

  //Calc IK

  
 
  // code for location
  pinMode(locator,INPUT);
  
  // code for colour sensor
   // resistance of LDR, analogue output
  //pinMode(colourSense,OUTPUT);
  
}

void loop()
{
  int crnt_pos1, crnt_pos2, crnt_pos3, crnt_pos4; // current position
  float ldr_output;

  
  
  
  // colour detector
  /*
  ldr_output = analogRead(A0);
  ldr_output = ldr_output*5/1023;
  if(ldr_output>3.9 && ldr_output<=4)
  {
    Serial.println("red: ");
    Serial.println(ldr_output);
    };
  if(ldr_output>4.25 && ldr_output<=4.35)
  {
    Serial.println("blue: ");
    Serial.println(ldr_output);
  };
  delay(10);
``*/
 
  // LOCATION DETECTION
  
  // Read in the ADC and convert it to a voltage:
  /*
  int proximityADC = analogRead(locator);
  float proximityV = (float)proximityADC * 5.0 / 1023.0;
  Serial.println(proximityV);
  delay(100);
  */
  
  // Limit switches size detection
  // if switch pressed
  /*
  if(digitalRead(10)==LOW){
    digitalWrite(13,HIGH);
  }else{
    digitalWrite(13,LOW);
  }
  */

  endEffectorPos[0] = 0; //x
  endEffectorPos[1] = -0.1; //y
  endEffectorPos[2] = 0; //z
  
  calc_IK(endEffectorPos);

  Serial.println(jointAngles[0]); 
  Serial.println(jointAngles[1]);
  Serial.println(jointAngles[2]);
  
  ///*
  servo1.slowmove(jointAngles[0],10);
  servo2.slowmove(jointAngles[1],10);
  servo3.slowmove(jointAngles[2],10);
  delay(6000);

  endEffectorPos[0] = 0; //x
  endEffectorPos[1] = -1; //y
  endEffectorPos[2] = 0; //z

  calc_IK(endEffectorPos);

  ///*
  servo1.slowmove(jointAngles[0],10);
  servo2.slowmove(jointAngles[1],10);
  servo3.slowmove(jointAngles[2],10);
  delay(6000);
  
  // return to default
  /*
  servo1.slowmove(pos1,10);
  servo2.slowmove(pos2,10);
  servo3.slowmove(pos3,10);
  delay(7000);
  
  */

  
  
  // CONTROL SHOULDER
  ///*
  
  
  //delay(4000);
  
  //delay(4000);

 //*/
  
 

  // CONTROL ELBOW
  ///*
  
  
  //delay(4000);
  
  //delay(4000);
  
  //servo2.slowmove(jointAngles[2],50);
  //*/

  // control claw
  /*
 
  servo4.slowmove(0,10);
  delay(4000);
  servo4.slowmove(pos4,10);
  delay(4000);
  */
  /*
   for(pos4=90;pos4>=5;pos4-=1){
    servo4.slowmove(pos4,80);
    delay(15);
  }
  for (pos4 = 5; pos4 <= 90; pos4 += 1) {
    // tell servo to go to position in variable 'pos'
    servo4.slowmove(pos4,80);
    // wait 15 ms for servo to reach the position
    delay(15); // Wait for 15 millisecond(s)
  }
  */
  }
